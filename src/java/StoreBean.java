/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import com.sun.corba.se.impl.naming.pcosnaming.NameService;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.RequestScoped;
import javax.inject.Named;

/**
 *
 * @author Kelly
 */
@Named("StoreBean")
@RequestScoped 
public class StoreBean {
    /**
     * Creates a new instance of StoreBean
     */

    private String productname;
    private String quantity;
    private String description;
 
    Connection conn = null;
    PreparedStatement pst =null;

  

    public void setProductname(String productname) {
          this.productname = productname;
    }
    
       public String getProductname() {
        return productname;
    }
    
   
    public void setQuantity(String quantity) {
          this.quantity = quantity;
    }
    
      public String getQuantity() {
        return quantity;
    }

 
    public void setDescription(String description) {
          this.description = description;
    }
    
        public String getDescription() {
        return description;
    }

    
      public String AddTostore(){
      
                   conn = Connectordb.connectDb();
             
             if(IsProductExist()){
             // if user product exist do notjing 
                         System.out.println("Product already exist");
             }
             else{
                
           try{ 
            pst = conn.prepareStatement("insert into store values (?,?,?,?,?)");
            pst.setString(1,null);
            pst.setString(2,productname);
            pst.setString(3,quantity);
            pst.setString(4,description);
            pst.setString(5,null);
          int status = pst.executeUpdate();
            if (status > 0) {
            System.out.println("Successfully saved");

            }
         
            }           
        catch(Exception e){ 
            System.out.println(e);
                   }
               
        return "/manage_storekeeper.xhtml?faces-redirect=true" ;  
             }
                   
             return null;

      }  
       
    
        public boolean IsProductExist(){
           try{
             conn = Connectordb.connectDb();
              String sql ="select id,productname from store where productname=  '" + productname + "' ";
              PreparedStatement pst = conn.prepareStatement(sql);
              ResultSet rs = pst.executeQuery();
            if(rs.next()){
              return true  ;
             }
           }catch (Exception e) {
            System.out.println(e);
            
        }    
       return false;   
    }
        
        
        public  void GetAllProducts(){
         
                try{
             conn = Connectordb.connectDb();
             
              String sqlstore ="select *  from store ";
              String sqlstaff ="select *  from staff ";
              
              
              PreparedStatement pststore = conn.prepareStatement(sqlstore);
              ResultSet rstore = pststore.executeQuery();
            while(rstore.next()){
                String id = rstore.getString("id");
                String productname = rstore.getString("productname");
                String quantity = rstore.getString("quantity");
                String description = rstore.getString("description");
                           
             }      
            
//              PreparedStatement pst = conn.prepareStatement(sqlstaff);
//              ResultSet rs = pst.executeQuery();
//               while(rs.next()){
//                
//             }
            
           }catch (Exception e) {
            System.out.println(e);
        }    
        }
        
    
    
    
  //generated by map
    private static Map<String, Object> favoriteCar2Value;
    static
    {
        favoriteCar2Value = new LinkedHashMap<String, Object>();
        
        favoriteCar2Value.put("BMW Series 1 - 116", "116"); //label, value
        favoriteCar2Value.put("BMW Series 1 - 118", "118");
        favoriteCar2Value.put("BMW Series 1 - 120", "120");
    }
   
     public Map<String, Object> getFavoriteCar2Value()
    {
        return favoriteCar2Value;
    }
    
}
